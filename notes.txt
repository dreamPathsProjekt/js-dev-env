#Specifications Checklist

* Editor* => VsCode
----------------------------------------
#ES6 Support
-Autocompletion
-Parse ES6 imports
-Report unused imports
-Automated Refactoring

#Framework Intelligense

#Built-In Terminal

* Package Manager * => npm
--------------------------
#   Security Scanning
-Manually: Easy to forget
-npm install: Possible Issue later
-Production build/pull request: Expensive to change
-npm start: Slows start

* Dev Web Server * => express
-----------------------------
#Options

#   simple-lightweight
-http-server: simple lightweight nodejs server
-live-server: lightweight, live-reloading

#   if existing back-end api (java,ruby etc.) skip these:
-express: nodejs default dynamic back-end server, run on production
|-alts: koa(es6 generators support),hapi

#   bundler integration:
-budo: integrates with browserify, hot-reloading
-webpack dev server: built-in to webpack, fast serves from memory, hot-reloading

#   special case:
-Browsersync: Dedicated Ip for sharing on Lan,
    hit same ip on multiple devices and remain in-sync (one click for all),
    great for cross device testing,
    integrates with browserify,webpack,gulp,
    recipes to choose from

* Share Work in progress * => localtunnel
-----------------------------------------
-localtunnel: share work from localhost, expose on firewall, fast testing combo with Browsersync
--Setup: npm install -g localtunnel
         start app
         lt --port 3000

-ngrok: secure tunnel to localhost, password protect access
--Setup: signup
         install ngrok
         install authtoken
         start app
         ./ngrok http 80

-now: quickly deploy node.js app to cloud, great if app has back-end in node.js
--Setup: npm install -g now
         create start script (e.g. run express)
         now

-surge: quickly host static file to public url, only support static files (html,css,js), easily add own domain (great for automated deployment)
--Setup: npm install -g surge
         surge {in proj dir}

* Automation * => npm scripts
-----------------------------
# Options:
-Grunt: configure over code (gruntfiles), writes files between steps, large plugin ecosystem (older)

-Gulp: in-memory streams (pipes), fast (no need to write files on disk), gulpfiles (js:json), large plugin ecosystem

-npm scripts: declared in package.json, leverage os cmd line, directly use npm pkges (cross-platform),
              call separate node scripts, convention-based pre/post hooks, largest pkg manager,
              tools directly-no need for separate plugins (gulp/grunt versions), simpler debugging - documentation

* Transpiling * => Babel =>Build Scripts:Transpiled
---------------------------------------------------
#   Popular Transpilers:

-Babel: modern features to standards-based js (es5), leverage full js ecosystem,
        es6 imports are statically analyzable (ide support),
        stage-X (0-4) experimental features via plugins
        |-  .babelrc (most common) or inside package.json:
            -.babelrc: not npm specific, isolated->easier to read
            -package.json: one less file in the project, in section "babel": {}

-Typescript: superset of js (es5) & es6 (adds type annotations & interfaces),
             enhanced autocompletion, safer refactoring, clearer intent

-Elm: compiles down to js, clean syntax, immutable data structures automatically,
      friendly errors, all errors are compile-time errors, interops with js, full functional language

    * Transpiling Build scripts or not *
    -Es5: faster no-wait for transpile, no transpiler dependencies
    -Transpiled: latest features, consistent coding style, use same linting rules everywhere

* Bundling * => Webpack
-----------------------
#   Js Modules

The Past:|-Globals: myGlobal; //should be avoided
         |
         |-IIFE (Immediately Invoked Function Expressions): Using Closures to encapsulate variables
         |    (function() {
         |        //code
         |    })();
         |
         |-AMD (Asynchronous Module Definition): define(['jq'], function(jq) {});

-UMD (Universal Module Definition)

-CommonJS: var jquery = require('jquery');

Present &|
Future:  |-Es6 Modules: import jQuery from 'jquery';

ES6 Modules: Standardized, Statically analyzable (improves autocompletion & refactoring), code fails fast,
             tree shaking, easy to read(vs AMD,UMD), named imports, default exports

#   Bundler Options:

-require.js (AMD): old

-browserify: first to use imports & npm pkges, bundle npm pkges for the web, large plugin ecosystem

-webpack: bundles more than js, import static content:CSS,images,fonts etc. like JS (even HTML),
          built-in web server with hot-reloading, serves files from memory, bundle splitting (download on-demand)

-rollup: tree shaking (remove unused code & imports), faster loading production code (vs. Webpack,browserify),
         quite new (few support), no hot-reloading & code-splitting yet

-jspm: uses systemJS a Universal Module Loader (supports mult. module format), load modules at runtime, has own pkg manager,
       can install from npm,git, uses rollup

#   Sourcemaps (maps code from bundled & transpiled back to original source, for debugging):
- Part of our build
- Only downloaded when open dev tools (so only dlded when needed)

=========================
* Recipe (manual cmds) *:
=========================
-add ext: editorconfig support for VsCode

-npm init
-paste dependencies from: https://gist.github.com/coryhouse/29bd1029b623beb4c7f79b748dcba844
{or npm install specifics for latest}
-npm install

#   Install security platform
-npm install -g nsp {installs nsp globally}
-nsp check {check for vlns}

#   Install,Configure Dev Web-Server (express)
-express pre-installed (see package.json)
-create folder buildScripts - add file srcServer.js
-configure express (see srcServer.js)
-create folder src - add file index.html (see index.html boilerplate)
-node buildScripts/srcServer.js {run express}

#   Share Work with localtunnel
-npm install -g localtunnel
-node buildScripts/srcServer.js {run express}
-open new terminal
-lt --port 3000
-{or add custom subdomain} lt --port 3000 --subdomain dpathsprojekt

#   Automate with npm scripts
    #   Create script to start express server
    -update package.json ->scripts: "start"
    -call with npm start
    -create pre hook file startMessage.js in buildScripts folder
    -define "prestart" script in scripts in package.json

    #   Create script to perform security check and start localtunnel
    -update package.json ->scripts: "security-check" and "share"
    -call with npm run security-check & npm run share
    -!npm packages get installed automatically when run from npm-script

    #   Run scripts concurrently
    -Change start script to "npm-run-all --parallel" (see package.json)
    -move old start script to "open:src"
    -fire up with npm start or npm start -s (for silent mode: no output noise from individual scripts)
    -same recipe for script localtunnel (see package.json)
    -fire up with npm run share

#   Configure Babel
- Select based on node version (node.js specific or electron):
    -babel-preset-es2015-node | Version detection (node specific)
    -babel-preset-latest-minimal | Feature detection
- Create .babelrc file in project folder
- Add "presets": latest (see .babelrc) for feature detection
- Test: change startMessage.js ->use import (module syntax) instead of var * = require('') (see startMessage.js)
- npm start fails!
- solution change node to babel-node (babel transpiles build scripts) cmd on scripts in package.json (see package.json)
- npm start transpiled
- also edit srcServer.js to es6 (see srcServer.js and commits diff)

#   Configure Webpack
- Create webpack.config.js (or webpack.config.dev.js) in project root folder
- Dev config: https://gist.github.com/coryhouse/d611e83e432f3ae65cc46ebb9b599930 (see webpack.config.dev.js)

#   Configure Webpack with Express to serve the bundle
- In srcServer.js add imports for webpack & webpack.config.dev.js
- Same file: set webpack compiler to compile on config
- Wire-up express with webpack (see srcServer.js)
- Create entry-point index.js (see index.js)
- Reference bundle.js in index.html
- Test bundling with npm start

#   How to Add CSS to bundle
- create index.css (in src but preferably in css folder)
- import css in index.js (see index.js) like importing js file
- behind the scenes bundle.js injects css with javascript in the document. Same can be done for SASS,LESS etc.

#   Configure build with Sourcemaps (Debug bundled & transpiled js)
- in webpack.config.dev.js -> devtool: 'inline-source-map' | Explore different options
- add breakpoint in index.js with debugger (see index.js)
- hit localhost:3000 with dev-tools and original es6 code is there



********************************************************************************
*                                                                              *
*!Bugfix: Terminate batch job not closing => Use Powershell as VsCode terminal.*
*                                                                              *
********************************************************************************
