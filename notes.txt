#Specifications Checklist

* Editor* => VsCode
----------------------------------------
#ES6 Support
-Autocompletion
-Parse ES6 imports
-Report unused imports
-Automated Refactoring

#Framework Intelligense

#Built-In Terminal

* Package Manager * => npm
--------------------------
#   Security Scanning
-Manually: Easy to forget
-npm install: Possible Issue later
-Production build/pull request: Expensive to change
-npm start: Slows start

* Dev Web Server * => express
-----------------------------
#Options

#   simple-lightweight
-http-server: simple lightweight nodejs server
-live-server: lightweight, live-reloading

#   if existing back-end api (java,ruby etc.) skip these:
-express: nodejs default dynamic back-end server, run on production
|-alts: koa(es6 generators support),hapi

#   bundler integration:
-budo: integrates with browserify, hot-reloading
-webpack dev server: built-in to webpack, fast serves from memory, hot-reloading

#   special case:
-Browsersync: Dedicated Ip for sharing on Lan,
    hit same ip on multiple devices and remain in-sync (one click for all),
    great for cross device testing,
    integrates with browserify,webpack,gulp,
    recipes to choose from

* Share Work in progress * => localtunnel
-----------------------------------------
-localtunnel: share work from localhost, expose on firewall, fast testing combo with Browsersync
--Setup: npm install -g localtunnel
         start app
         lt --port 3000

-ngrok: secure tunnel to localhost, password protect access
--Setup: signup
         install ngrok
         install authtoken
         start app
         ./ngrok http 80

-now: quickly deploy node.js app to cloud, great if app has back-end in node.js
--Setup: npm install -g now
         create start script (e.g. run express)
         now

-surge: quickly host static file to public url, only support static files (html,css,js), easily add own domain (great for automated deployment)
--Setup: npm install -g surge
         surge {in proj dir}

* Automation * => npm scripts
-----------------------------
# Options:
-Grunt: configure over code (gruntfiles), writes files between steps, large plugin ecosystem (older)

-Gulp: in-memory streams (pipes), fast (no need to write files on disk), gulpfiles (js:json), large plugin ecosystem

-npm scripts: declared in package.json, leverage os cmd line, directly use npm pkges (cross-platform),
              call separate node scripts, convention-based pre/post hooks, largest pkg manager,
              tools directly-no need for separate plugins (gulp/grunt versions), simpler debugging - documentation

* Transpiling * => Babel =>Build Scripts:Transpiled
---------------------------------------------------
#   Popular Transpilers:

-Babel: modern features to standards-based js (es5), leverage full js ecosystem,
        es6 imports are statically analyzable (ide support),
        stage-X (0-4) experimental features via plugins
        |-  .babelrc (most common) or inside package.json:
            -.babelrc: not npm specific, isolated->easier to read
            -package.json: one less file in the project, in section "babel": {}

-Typescript: superset of js (es5) & es6 (adds type annotations & interfaces),
             enhanced autocompletion, safer refactoring, clearer intent

-Elm: compiles down to js, clean syntax, immutable data structures automatically,
      friendly errors, all errors are compile-time errors, interops with js, full functional language

    * Transpiling Build scripts or not *
    -Es5: faster no-wait for transpile, no transpiler dependencies
    -Transpiled: latest features, consistent coding style, use same linting rules everywhere

* Bundling * => Webpack
-----------------------
#   Js Modules

The Past:|-Globals: myGlobal; //should be avoided
         |
         |-IIFE (Immediately Invoked Function Expressions): Using Closures to encapsulate variables
         |    (function() {
         |        //code
         |    })();
         |
         |-AMD (Asynchronous Module Definition): define(['jq'], function(jq) {});

-UMD (Universal Module Definition)

-CommonJS: var jquery = require('jquery');

Present &|
Future:  |-Es6 Modules: import jQuery from 'jquery';

ES6 Modules: Standardized, Statically analyzable (improves autocompletion & refactoring), code fails fast,
             tree shaking, easy to read(vs AMD,UMD), named imports, default exports

#   Bundler Options:

-require.js (AMD): old

-browserify: first to use imports & npm pkges, bundle npm pkges for the web, large plugin ecosystem

-webpack: bundles more than js, import static content:CSS,images,fonts etc. like JS (even HTML),
          built-in web server with hot-reloading, serves files from memory, bundle splitting (download on-demand)

-rollup: tree shaking (remove unused code & imports), faster loading production code (vs. Webpack,browserify),
         quite new (few support), no hot-reloading & code-splitting yet

-jspm: uses systemJS a Universal Module Loader (supports mult. module format), load modules at runtime, has own pkg manager,
       can install from npm,git, uses rollup

#   Sourcemaps (maps code from bundled & transpiled back to original source, for debugging):
- Part of our build
- Only downloaded when open dev tools (so only dlded when needed)

* Linting * => ESLint
---------------------
#   Popular linters:

- JSLint: original by D.Crockford, opinionated

- JSHint: configurability

- ESLint: modern standard
  (choose TSLint for TS support or diff for Elm)

# ESLint - Core Decisions:

-1. Config format
-2. Built-in rules
-3. Warn or errors
-4. Which plugins
-5. Use preset instead

#   1.Config format
- .eslintrc.js
- .eslintrc.yaml
- .eslintrc.yml
- .eslintrc.json
- .eslintrc
^Dedicated: not tied to npm

- package.json: one less file

#   2.Which rules?
- Enforce consistency

#   3.Warn or errors?
- Warning: can continue development (move fast), can be ignored(dangerous),
           good for stylistic preferances, team must agree: fix warnings (don't commit)

- Error: breaks the build (move slower), cannot be ignored,
         good for potentially introducing bugs, team forced to comply

#   4.Which plugins?
- e.g. use eslint-plugin-react for rules specific to React-jsx,
       use eslint-plugin-node for node.js, eslint-plugin-angular for AngularJS etc.

- List of ESLint plugins & styleguides: github.com/dustinspecker/awesome-eslint

#   5.Use Preset?
- Start from scratch: tedious, comprehensive
- ESLint Recommended: standard rules, tweak as needed
- Presets: e.g. airbnb,XO,standardJS (not actually a standard - disallowing ; and enforcing ' single quotes = rather unpopular in js community)
           faster, restrictive

#   ESLint Issues {- (*) indicates used in starter-kit -}:

- ESLint doesn't watch files (automatically):
|- eslint-loader: tied to webpack, re-lints all files upon save,
                  silent when no issues
|- eslint-watch (*): npm pkg, ESLint wrapper that adds file watch, standalone,
                 better error/warn formatting, displays clean msg when no issues,
                 lint tests, webpack config & build scripts too

- ESLint no support for many experimental features:
|- Run ESLint directly (*): ES6 & ES7 native support, supports object spread(xp feat)
|- Babel-eslint: Lint stage 0-4 features

#   Why Lint via Automated Build Process vs In-Editor Linting:
- One single place to check
- Universal configuration (among team)
- Part of CI (Continuous Integration => Reject builds automatically)

* Testing & CI * => Mocha
-------------------------
#   Testing Styles:
- Unit: Single function/module, fast
- Integration: Interactions between modules, test multiple units, slower
- UI: Automate interactions with UI (clicks,keystrokes etc. by using e.g. Selenium)

#   Unit Testing Decisions:
- 1.Framework
- 2.Assertion Library
- 3.Helper Libraries
- 4.Where (env) to run tests
- 5.Where to place tests
- 6.When to run tests

#   1.Testing Framework => Mocha:
- Mocha: configurable, popular(large support/eco), no built-in assertion lib
- Jasmine: built-in assertion lib
- Tape: simple-lean, minimal config
- QUnit: oldest, used to test jQuery
- AVA: run tests in-parallel, only re-run affected tests, fast
- Jest: wrapper over Jasmine, suited to React

#   2.Assertion Library => Chai:
- Chai
- Should.js
- expect.js

#   3.Helper Libraries => JSDOM + Cheerio:
- JSDOM: simulate browser's DOM for testing (run faster tests without a browser)
- Cheerio: jQuery for the server (query virtual DOM using jQuery selectors)

#   4.Where to run => JSDOM:
- Browser (slower): Karma, Testem
- Headless Browser (no visible UI, fast): PhantomJS
- In-memory DOM (faster, lightweight): JSDOM (virtual DOM)

#   5.Where do test files belong? => Alongside (dubious):
- Centralized (folder): separation, Mocha, less noise to src folder
- Alongside src files: easy imports, clear visibility, easy to open, no recreate folder structure, easy to refactor/move

#   6.When to run? => on-save:
- Every time you save: rapid feedback, facilitate TDD,
                       reduce friction, increase visibility

#   CI - Server => Travis & Appveyor (cover Linux & Windows):
- Run automated build (incl. who commited - changed build)
- Run tests (ensures always happens)
- Check code coverage (reject commit if coverage < threshold)
- Automate deployment

    # Options:
    - Travis (Linux): hosted, large ecosystem, uses github
    - Appveyor (Windows): hosted
    - Jenkins: self-hosted/cloud, large ecosystem
    - CircleCI
    - Semaphore
    - SnapCI

* HTTP Calls *
--------------
#   Options: { (*) preferred }

- Node: (libraries) http, request (*)

- Browser: plain XMLHttpRequest (lots of plumbing), jQuery $.ajax(), Framework-based,
           Fetch (Api) (*) -> lacks multi-browser support needs polyfill:
              Browser polyfill: github.com/github/fetch
              Isomorphic: github.com/matthew-andrews/isomorphic-fetch

- Node & Browser: isomorphic-fetch (*), xhr (npm pkg), SuperAgent, Axios (libs) (*)

#  (important!) Centralize API Calls:
- Single spot to configure all Calls
- Handle preloader logic (e.g. spinner shows on user)
- Single place to Handle Errors (dialogs, alerts)
- Single seam for mocking

#   Send polyfill to only needed browsers (instead of everyone on js file):
- polyfill.io

#   Mocking HTTP
    #   Reasons:
    - Unit Test
    - Instant response
    - Keep working when service is down
    - Rapid prototypes
    - Avoid inter-team bottlenecks (while other team works on service resources)
    - Work offline on client-side

    #   How to mock:
    - Nock: unit test
    - Static JSON:
    - Create dev web-server:
        -api-mock
        -JSON server (works with static JSON too)
        -JSON Schema faker (dynamic JSON generation)
        -Browsersync, Express: custom API, more work, comprehensive

    Static JSON     JSON Server     JSON Server+ JSON Schema Faker      Express,Browsersync etc.
    >------------------------------------------------------------------------------------------->
    --> Upfront work
    --> Realism simulation
    --> Customization

#   Mocking plan:
- 1.Declare schema: JSON Schema Faker
- 2.Generate Random Data: faker.js, chance.js, randexp.js (based on regexp)
- 3.Serve Data via API: JSON Server pointed to dynamically json generated at 2.

* Project Structure *
---------------------

#   Include Demo App in Starter Kit:
- Examples: Directory structure & file naming,Framework usage, Testing, Mock Api, Automated Deployment Recipe
- Codifies decisions
- Howto work with starter kit

#   Project Structure Tips:
- 1.JS in .js files strictly
    - Use the Configuration Object Pattern: Inject configuration-based Json from the server into the application (serve dynamically generated data), DON'T output dynamically generated js.
- 2.Organize by feature insted of organizing by filetype (like in MVC patterns)
- 3.Extract logic into POJOs. (Plain Old JavaScript Objects)
    - Pure logic/no Framework specific code e.g. logic outside React components.
    - Decouple dependency of app on Framework.
    - See https://github.com/coryhouse/react-slingshot for example (folder Utils)

* Production *
--------------

#   Minification:
- Minified code is debugged via sourcemap (see Bundling)

#   Manipulate HTML for Production:
- References bundles automatically
- Handle dynamic bundle names
- Inject production only resources
- Minify HTML

#   Reference Bundled Assets in HTML => html-webpack-plugin:
- Hard code bundle.js (simple setups)
- Manipulate via Node script
- html-webpack-plugin (via Webpack)

#   Bundle Splitting:
- Speed initial page load (cached separately)
- Avoid re-download all libraries
- Options:
    - split per page
    - split 3rd-party libs to separate bundle

#   Cache Busting (preserve bandwidth - js bundle !expire (in-client) for up to 1 year):
- Save Http Requests
- Force request for latest version
- Plan:
    - 1.Hash bundle filename: filename only change when the bundle actually changes
    - 2.Generate HTML dynamically (HtmlWebpackPlugin)

#   Production Error Logging:
- Error Metadata (of user errors)
    - Browser
    - Stack trace
    - Previous actions
    - Custom API for enhanced tracking
- Notifications (etc.  email) & integrations (etc. in Slack)
- Analytics & Filtering
- Pricing

- Options:
    - TrackJS (*)
    - Sentry
    - New Relic
    - Raygun

=========================
* Recipe (manual cmds) *:
=========================
-add ext: editorconfig support for VsCode

-npm init
-paste dependencies from: https://gist.github.com/coryhouse/29bd1029b623beb4c7f79b748dcba844
{or npm install specifics for latest}
-npm install

#   Install security platform
-npm install -g nsp {installs nsp globally}
-nsp check {check for vlns}

#   Install,Configure Dev Web-Server (express)
-express pre-installed (see package.json)
-create folder buildScripts - add file srcServer.js
-configure express (see srcServer.js)
-create folder src - add file index.html (see index.html boilerplate)
-node buildScripts/srcServer.js {run express}

#   Share Work with localtunnel
-npm install -g localtunnel
-node buildScripts/srcServer.js {run express}
-open new terminal
-lt --port 3000
-{or add custom subdomain} lt --port 3000 --subdomain dpathsprojekt

#   Automate with npm scripts
    #   Create script to start express server
    -update package.json ->scripts: "start"
    -call with npm start
    -create pre hook file startMessage.js in buildScripts folder
    -define "prestart" script in scripts in package.json

    #   Create script to perform security check and start localtunnel
    -update package.json ->scripts: "security-check" and "share"
    -call with npm run security-check & npm run share
    -!npm packages get installed automatically when run from npm-script

    #   Run scripts concurrently
    -Change start script to "npm-run-all --parallel" (see package.json)
    -move old start script to "open:src"
    -fire up with npm start or npm start -s (for silent mode: no output noise from individual scripts)
    -same recipe for script localtunnel (see package.json)
    -fire up with npm run share

#   Configure Babel
- Select based on node version (node.js specific or electron):
    -babel-preset-es2015-node | Version detection (node specific)
    -babel-preset-latest-minimal | Feature detection
- Create .babelrc file in project folder
- Add "presets": latest (see .babelrc) for feature detection
- Test: change startMessage.js ->use import (module syntax) instead of var * = require('') (see startMessage.js)
- npm start fails!
- solution change node to babel-node (babel transpiles build scripts) cmd on scripts in package.json (see package.json)
- npm start transpiled
- also edit srcServer.js to es6 (see srcServer.js and commits diff)

#   Configure Webpack
- Create webpack.config.js (or webpack.config.dev.js) in project root folder
- Dev config: https://gist.github.com/coryhouse/d611e83e432f3ae65cc46ebb9b599930 (see webpack.config.dev.js)

#   Configure Webpack with Express to serve the bundle
- In srcServer.js add imports for webpack & webpack.config.dev.js
- Same file: set webpack compiler to compile on config
- Wire-up express with webpack (see srcServer.js)
- Create entry-point index.js (see index.js)
- Reference bundle.js in index.html
- Test bundling with npm start

#   How to Add CSS to bundle
- create index.css (in src but preferably in css folder)
- import css in index.js (see index.js) like importing js file
- behind the scenes bundle.js injects css with javascript in the document. Same can be done for SASS,LESS etc.

#   Configure build with Sourcemaps (Debug bundled & transpiled js)
- in webpack.config.dev.js -> devtool: 'inline-source-map' | Explore different options
- add breakpoint in index.js with debugger (see index.js)
- hit localhost:3000 with dev-tools and original es6 code is there

#Opt (Not used)  Configure ESLint via package.json
- add section: "eslintConfig": {
                    "plugins": ["example"],
                    "env": {
                        "example/custom": true
                    }
                }

#   Set up ESLint Strategy:
- use ESLint Recommended
- use eslint-watch
- Create .eslintrc.json (.eslintrc to be deprecated) file in project root
- Copy https://gist.github.com/coryhouse/61f866c7174220777899bcfff03dab7f (see .eslintrc.json)
- Mouseover properties for explanation
- Set personal rules in "rules": {} 0 - Off, 1 - Warning, 2 - Error
- run it via npm script: use eslint-watch (devDependencies)
- create script that runs esw (eslint-watch) (see package.json) -> esw webpack.config.* src buildScripts (warning space separated declarations of files/folders)
- disable linting built-in editor (if you have .eslintrc in user dir delete it)
- run with npm run lint and fix errors/warns (for console warnings that you want use /* eslint-disable no-console */ or in-line //eslint-disable-line no-console )

#   Set up ESLint to watch files:
- eslint-watch doesn't watch files by default -> create separate npm script to watch files
- add script lint:watch to package.json and pass option --watch to existing lint script
- test with npm run lint:watch and test live-generated linting on save
- add linting to start script (see package.json)

#   Testing Setup:
- Automated pipeline: Mocha:Chai:JSDOM:Node:Alongside:OnSave
- Create testSetup.js in buildScripts/ add config for babel pre-transpiling and disabling .css imports on testing (see testSetup.js)
- Add test script to package.json (edit "test" section)
    * --reporter: progress (slim output-choose what reporter you like)
    * run testSetup.js first
    * run any tests associated with files src/*.test.js
- Create test for index.js index.test.js in src/
- Add test that uses JSDOM (see index.test.js) - warning tests run asynchronously
- Add script test:watch to watch files and run tests on save (see package.json)
- Add test:watch to main build automation pipeline in start -> live-testing on save

#  Setup Continuous Integration:

## Travis CI - Test build on Linux
- Sign-In (with github) to travis-ci.org
- Turn On Project Repo in travis-ci
- Create .travis.yml on / and edit configuration (see .travis.yml be careful yml syntax works with space on - character and 2 spaces on sub-fields)
- Test by minor change to index.html & commit changes to git repo
- Assert on travis dashboard that build failed. Change index.html and commit/push

## AppVeyor - Test build on Windows
- Sign-In (with github) to https://www.appveyor.com/
- New Project - auth github and add repo
- Create appveyor.yml on /
- Edit configuration (see appveyor.yml)
- On AppVeyor dashboard click latest build

#   Set quick Node/Express Api
- Create single endpoint (/users)-> Inside srcServer.js for simplicity
- Test with npm start

#   Centralize HTTP calls
- Create folder src/api/ -> create userApi.js file that consumes users entity
- Create simple fetch function getUsers() (see userApi.js)
- See index.html for api call in table use
- Consume endpoint in index.js and populate table (see index.js)
- Adjust DOM tests as needed

#   Setup fetch - Selective polyfilling
- In index.html set <script src="https://cdn.polyfill.io/v2/polyfill.js?features=fetch"></script>

#   Create a Mock API Data JSON Schema
- Create file mockDataSchema.js in buildScripts/
- Copy Json Schema from https://gist.github.com/coryhouse/300ed803148caaf9d4f3f45d1a03874d ,
  also see http://json-schema.org/examples.html
- Use property inside schema "faker" to generate data (see mockDataSchema.js) from faker.js library
- If you don't specify required properties some properties may not always show up, in case of root element the whole document may occasionally not show up

#   Generate JSON data from schema using JSON Schema faker
- Create file generateMockData.js in buildScripts/ (usually these schema files should be included inside folders of API)
- Import json-schema-faker library and parse schema to generate json mock output
- Create script "generate-mock-data" in package.json to automate
- Test with npm run generate-mock-data (outputs db.json file)

#   Serve mock data with JSON-Server
- Create "start-mockapi" script in package.json with cmd "json-server --watch src/api/db.json --port 3001" (port 3001 to diff from dev-server @3000)
- Test with npm run start-mockapi
- Generate new mock data (randomize) every time app starts
- Declare pre hook("pre~") to "start-mockapi" in package.json
- Attach start-mockapi to start script
- Create file baseUrl.js in src/api/ to point to production (hard coded data served from express) or development Api based on window.location
- Fix consumer (userApi.js) to point to baseUrl + url -> change based on environment (dev : production)

#   Wire-Up Delete links to view JSON-Server live changes on db.json (Manipulate data)
- In userApi.js export a new public function deleteUser(id) (also implement del(expose delete on id path variable) function as service pattern)
- On index.js call deleteUser on each link ,remove from table.
- Test that db.json removes record automatically (data persists like real db).

#   Set up Minification - Production Changes
- Copy webpack.config.dev.js to webpack.config.prod.js
- Production settings:
    - devtool (sourcemaps generated) to 'source-map' (slower)
    - output path to 'dist' (distribution)
    - setup minification: add Uglify.js plugin
    - eliminate duplicate pkges: add DeDupe.js plugin
- Create build.js script in buildScripts/ to run webpack compiler on build
- Create file distServer.js in buildScripts/ to run distServer (like srcServer)
- Copy srcServer.js to distServer.js and make changes (see distServer.js)
- Toggle Api: Change http api calls based on path parameter useMockApi=true (test on browser) in baseUrl.js

#   Automate Production Build Orchestration
- Declare "clean-dist", "prebuild", "build", "postbuild" scripts and pre/post hooks in package.json as script execution structure
    - Breakdown: npm run build runs main build.js ,pre hook runs clean-dist, runs tests & linter, post hook fires up the distServer
    - Clean-dist: deletes previous dist/ folder and creates new folder dist/
- Test npm run build >> Error because index.html does not exist in dist/ folder
- Update .gitignore to not track dist/ folder

#   Handle Dynamic HTML
- Inject html-webpack-plugin in webpack.config.prod.js (see file)
- Remove script tag from index.html and also update webpack.config.dev.js to reference bundled html
- Warning delete links do not work on production api (no handlers)
- Minify HTML also in webpack.config.prod.js -> plugins -> HtmlWebpackPlugin -> minify: configuration (see file)

#   Bundle Splitting with Webpack (for larger apps)
- We can define multiple entry points in webpack.config.prod.js -> use keys for each one
- Create vendor.js in src/ to reference 3rd-party libs
- Add CommonsChunkPlugin to webpack plugins in webpack.config.prod.js
- Update filename to webpack output to placeholder value in webpack.config.prod.js

#   Bust Cache
{ - Configure webserver to set far-future headers, app js bundles expire much later }
- Use webpack-md5-cache plugin to hash filenames in webpack.config.prod.js
- Import, plugins list and update output -> filename prop.

#   Extract separate & minify CSS (instead of bundling up with JS in bundle files)
- Setup ExtractTextPlugin in webpack.config.prod.js -> import, plugins & update css loaders

#   Setup error tracking via TrackJS (warning: free-trial)
- Sign Up in https://trackjs.com/ (won't do)
- Paste tracker library (2 scripts) at html <head></head> before any other content loads (won't do)
- Test Throw error with trackJs.track('hey!') in browser devtools console.

#   Dynamically inject HTML for different environments
- Example: Stop logging errors in dev environment with TrackJS. Enable in production. -> conditional logic in HTML via html-webpack-plugin
- See templating language EJS - EmbeddedJs at embeddedjs.com
- In webpack.config.prod.js inject TrackJS token (like in <script></script> code) in HtmlWebpackPlugin section under inject (see commented lines) (have injected own mock token)
- Use EJS syntax condition inside index.html (see src/index.html)

********************************************************************************
*                                                                              *
*!Bugfix: Terminate batch job not closing => Use Powershell as VsCode terminal.*
*                                                                              *
********************************************************************************

Notes / Bugs uncaught:
----------------------
html-webpack-plugin does not compile on node 6.7.0 and npm 3.10.3

Html Webpack Plugin:

  Error: Child compilation failed:
  Module build failed: SyntaxError: Unexpected token .

  - lodash.js:14843
    [js-dev-env]/[lodash]/lodash.js:14843:16

  - lodash.js:494 apply
    [js-dev-env]/[lodash]/lodash.js:494:27

  - lodash.js:15227
    [js-dev-env]/[lodash]/lodash.js:15227:16

  - lodash.js:496 apply
    [js-dev-env]/[lodash]/lodash.js:496:27

  - lodash.js:6600
    [js-dev-env]/[lodash]/lodash.js:6600:16

  - lodash.js:14842 Function.template
    [js-dev-env]/[lodash]/lodash.js:14842:20


  - SyntaxError: Unexpected token .

  - compiler.js:76
    [js-dev-env]/[html-webpack-plugin]/lib/compiler.js:76:16

  - Compiler.js:214 Compiler.
    [js-dev-env]/[webpack]/lib/Compiler.js:214:10

  - Compiler.js:403
    [js-dev-env]/[webpack]/lib/Compiler.js:403:12

  - Tapable.js:67 Compiler.next
    [js-dev-env]/[tapable]/lib/Tapable.js:67:11

  - CachePlugin.js:40 Compiler.
    [js-dev-env]/[webpack]/lib/CachePlugin.js:40:4

  - Tapable.js:71 Compiler.applyPluginsAsync
    [js-dev-env]/[tapable]/lib/Tapable.js:71:13

  - Compiler.js:400 Compiler.
    [js-dev-env]/[webpack]/lib/Compiler.js:400:9

  - Compilation.js:577 Compilation.
    [js-dev-env]/[webpack]/lib/Compilation.js:577:13

  - Tapable.js:60 Compilation.applyPluginsAsync
    [js-dev-env]/[tapable]/lib/Tapable.js:60:69

  - Compilation.js:572 Compilation.
    [js-dev-env]/[webpack]/lib/Compilation.js:572:10

  - Tapable.js:67 Compilation.next
    [js-dev-env]/[tapable]/lib/Tapable.js:67:11

  - UglifyJsPlugin.js:140 Compilation.
    [js-dev-env]/[webpack]/lib/optimize/UglifyJsPlugin.js:140:4

  - Tapable.js:71 Compilation.applyPluginsAsync
    [js-dev-env]/[tapable]/lib/Tapable.js:71:13

  - Compilation.js:567 Compilation.
    [js-dev-env]/[webpack]/lib/Compilation.js:567:9

  - Tapable.js:60 Compilation.applyPluginsAsync
    [js-dev-env]/[tapable]/lib/Tapable.js:60:69

  - Compilation.js:563 Compilation.
    [js-dev-env]/[webpack]/lib/Compilation.js:563:8


